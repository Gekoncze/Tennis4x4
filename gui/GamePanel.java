
package gui;

import core.Tennis4x4;
import core.graphics.backend.Canvas;
import core.graphics.backend.ColorRgb;
import core.graphics.Renderer;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import javax.swing.Timer;

/**
 *
 * @author gekoncze
 */
public class GamePanel extends javax.swing.JPanel {
    public class Input {
        public boolean moveLeft = false;
        public boolean moveRight = false;
        public boolean wave = false;
    }
    
    private static final int DRAW_TIME = 25;
    private final Timer drawTimer, inputTimer;
    private BufferedImage buffer;
    private Input input = new Input();
    
    public GamePanel() {
        initComponents();
        addListeners();
        
        drawTimer = new Timer(DRAW_TIME, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                repaint();
            }
        });
        
        inputTimer = new Timer(Tennis4x4.INPUT_TIME, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                if(input.moveLeft){
                    ClientDialog.sendMoveLeft();
                }
                if(input.moveRight){
                    ClientDialog.sendMoveRight();
                }
                if(input.wave){
                    ClientDialog.sendWave();
                    input.wave = false;
                }
            }
        });
        
        drawTimer.start();
        inputTimer.start();
        requestFocus();
    }
    
    public void cleanup(){
        drawTimer.stop();
    }
    
    public void keyPressedEvent(int keyCode) {
        switch(keyCode){
            case KeyEvent.VK_A: input.moveLeft = true; break;
            case KeyEvent.VK_D: input.moveRight = true; break;
            case KeyEvent.VK_SPACE: input.wave = true; break;
        }
    }
    
    public void keyReleasedEvent(int keyCode) {
        switch(keyCode){
            case KeyEvent.VK_A: input.moveLeft = false; break;
            case KeyEvent.VK_D: input.moveRight = false; break;
        }
    }
    
    private void resizedEvent(){
        buffer = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_3BYTE_BGR);
    }
    
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        
        Canvas canvas = new Canvas(
                (Graphics2D)(buffer.getGraphics()),
                buffer.getWidth(),
                buffer.getHeight()
        );
        
        Renderer.draw(canvas, ClientDialog.getGame(), ClientDialog.ggetPlayer());
        
        if(ClientDialog.isShowStepIds()){
            canvas.setColor(new ColorRgb(255, 255, 255));
            canvas.drawTextCentered("Client: " + ClientDialog.getStepId(), 64, 64, 24);
            canvas.drawTextCentered("Server: " + ServerDialog.getStepId(), 64, 96, 24);
        }
        
        g.drawImage(buffer, 0, 0, this);
    }
    
    private void addListeners(){
        addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent ke) {
                super.keyPressed(ke);
                keyPressedEvent(ke.getKeyCode());
            }

            @Override
            public void keyReleased(KeyEvent ke) {
                super.keyReleased(ke);
                keyReleasedEvent(ke.getKeyCode());
            }
        });
        
        addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent ce) {
                resizedEvent();
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPreferredSize(new java.awt.Dimension(512, 512));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
